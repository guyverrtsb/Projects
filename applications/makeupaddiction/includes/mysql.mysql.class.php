<?php/*** MySQL Database Connection Class* @access public* @package SPLIB*/class MySQL {    /**    * MySQL server hostname    * @access private    * @var string    */    var $dbHost;    /**    * MySQL username    * @access private    * @var string    */    var $dbUser;    /**    * MySQL user's password    * @access private    * @var string    */    var $dbPass;    /**    * Name of database to use    * @access private    * @var string    */    var $dbName;    /**    * MySQL Resource link identifier stored here    * @access private    * @var string    */    var $dbConn;    /**    * Stores error messages for connection errors    * @access private    * @var string    */    var $connectError;    /**    * MySQL constructor    * @param string host (MySQL server hostname)    * @param string dbUser (MySQL User Name)    * @param string dbPass (MySQL User Password)    * @param string dbName (Database to select)    * @access public    */    function MySQL () {  $this->dbHost = 'localhost:3306';  $this->dbUser = 'root';  $this->dbPass = 'GDHonkey_01';  $this->dbName = 'lclmakeupaddiction';    }    /**    * Establishes connection to MySQL and selects a database    * @return void    * @access private    */    function connectToDb () {        // Make connection to MySQL server        if (!$this->dbConn = mysql_connect($this->dbHost,                                      $this->dbUser,                                      $this->dbPass)) {            trigger_error('Could not connect to server');            $this->connectError=true;        // Select database        echo $this->dbName;        } else if ( !mysql_select_db($this->dbName,$this->dbConn) ) {            trigger_error('Could not select database');            $this->connectError=true;        }    }    /**    * Checks for MySQL errors    * @return boolean    * @access public    */    function isError () {        if ( $this->connectError )            return true;        $error=mysql_error ($this->dbConn);        if ( empty ($error) )            return false;        else            return true;    }    /**    * Returns an instance of MySQLResult to fetch rows with    * @param $sql string the database query to run    * @return MySQLResult    * @access public    */    function query($sql) {        if (!$queryResource=mysql_query($sql,$this->dbConn))		{			//trigger_error ('Query failed: '.mysql_error($this->dbConn).' SQL: '.$sql);            error_log("Query failed ".mysql_error($this->dbConn));			throw new Exception("Query failed ".mysql_error($this->dbConn));		}        return new MySQLResult($this,$queryResource);    }	//Transaction auto commit is off	function begainTransaction(){		$this->query("SET AUTOCOMMIT=0");		$this->query("START TRANSACTION");	}	//Transaction auto commit is on	function commit(){		$this->query("COMMIT");		$this->query("SET AUTOCOMMIT=1");	}	function rollBack(){		$this->query("ROLLBACK");		$this->query("SET AUTOCOMMIT=1");	}}/*** MySQLResult Data Fetching Class* @access public* @package SPLIB*/class MySQLResult {    /**    * Instance of MySQL providing database connection    * @access private    * @var MySQL    */    var $mysql;    /**    * Query resource    * @access private    * @var resource    */    var $query;    /**    * MySQLResult constructor    * @param object mysql   (instance of MySQL class)    * @param resource query (MySQL query resource)    * @access public    */    function MySQLResult(& $mysql,$query) {        $this->mysql=& $mysql;        $this->query=$query;    }    /**    * Fetches a row from the result    * @return array    * @access public    */    function fetch () {        if ( $row=mysql_fetch_array($this->query,MYSQL_ASSOC) ) {            return $row;        } else if ( $this->size() > 0 ) {            mysql_data_seek($this->query,0);            return false;        } else {            return false;        }    }	function fetchAsso () {		if ( $row=mysql_fetch_assoc($this->query) ) {			return $row;		} else if ( $this->size() > 0 ) {			mysql_data_seek($this->query,0);			return false;		} else {			return false;		}	}    /**    * Returns the number of rows selected    * @return int    * @access public    */    function size () {        return mysql_num_rows($this->query);    }    function fields () {        return mysql_num_fields($this->query);    }    /**    * Returns the ID of the last row inserted    * @return int    * @access public    */    function insertID () {        return mysql_insert_id($this->mysql->dbConn);    }    /**    * Checks for MySQL errors    * @return boolean    * @access public    */    function isError () {        return $this->mysql->isError();    }}error_log("mysql.mysql.class.php", 0);?>